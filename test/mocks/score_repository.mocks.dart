
// Mocks generated by Mockito 5.4.0 from annotations
// in my_2048/test/game_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:my_2048/repositories/score_repository.dart' as _i2;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ScoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockScoreRepository extends _i1.Mock implements _i2.ScoreRepository {
  @override
  set pref(_i3.SharedPreferences? _pref) => super.noSuchMethod(
        Invocation.setter(
          #pref,
          _pref,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNewScore(
    int? boardSize,
    int? score,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setNewScore,
          [
            boardSize,
            score,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<int> getBestScore(int? boardSize) => (super.noSuchMethod(
        Invocation.method(
          #getBestScore,
          [boardSize],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
